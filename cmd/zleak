#!/usr/bin/env python3
# SPDX-License-Identifier: CDDL-1.0

#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source.  A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#

#
# Copyright (c) 2025 by Klara, Inc.
#

import argparse, fileinput, libzfs_core, sys, errno

def perform_raw_alloc(pool, ms_shift, ms_count, vdev_id, allocs, force,
    verbose):
    if args.verbose == 1:
        print(f"Raw alloc: vdev {vdev_id}, {count} starting with offset "
              f"{allocs[0][0]}")
    if args.verbose >= 2:
        print(f"Raw alloc: {pool} {ms_shift} {ms_count} {vdev_id} {count}")
    try:
        libzfs_core.lzc_raw_alloc(pool, 1 << ms_shift, ms_count, vdev_id,
                                  allocs, args.force)
    except libzfs_core.exceptions.ZFSGenericError as e:
        if e.errno == errno.EINVAL:
            print("Invalid map for provided pool")
            sys.exit(1)
        assert (e.errno == errno.E2BIG and force)
        sys.exit(0)

allocs = []
count = 0

parser = argparse.ArgumentParser(
    prog='zleak',
    description='facility to replicate memory fragmentation in ZFS'
)
parser.add_argument('poolname')
parser.add_argument('-v', '--verbose', action='count', default=0)
parser.add_argument('-f', '--force', action='store_true', default=False)
args = parser.parse_args()

pool = args.poolname.encode('utf-8')

for line in fileinput.input('-'):
    dump = False
    line = line.rstrip()
    if not line.startswith(("ALLOC: ", "\tvdev ", "\tmetaslabs ")):
        continue

    tokens = line.split()
    if line.startswith("\tvdev    "):
        next_vdev_id = int(tokens[1])
        next_ms_shift = int(tokens[4])
        next_ms_count = 0
        dump = True
    elif line.startswith("\tmetaslabs "):
        next_ms_count = int(tokens[1])
    else:
        start = int(tokens[1])
        size = int(tokens[2])
        allocs.append((start, size))
        count = count + 1

    if count == 1000000 or (dump and count != 0):
        perform_raw_alloc(pool, ms_shift, ms_count, vdev_id, allocs,
                          args.force, args.verbose)
        count = 0
        allocs = []
    vdev_id = next_vdev_id
    ms_shift = next_ms_shift
    ms_count = next_ms_count


if count > 0:
    perform_raw_alloc(pool, ms_shift, ms_count, vdev_id, allocs,
                      args.force, args.verbose)

